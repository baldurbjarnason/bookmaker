#!/usr/bin/env node

'use strict';


var bookmaker, done, fs, generate, load, loader, sequence, whenjs, log, winston, logger;

logger = require('./src/logger');
winston = require('winston');
var newLogger = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)({ level: 'info', colorize: 'true' }),
  ]
});
logger.replaceLogger(newLogger);
log = logger.logger();

bookmaker = require('./src/index');

fs = require('fs');

whenjs = require('when');

sequence = require('when/sequence');

var os = require('os');
var path = require('path');
var fs = require('fs');

var temppath = path.resolve(os.tmpDir(), 'bm' + require('crypto').randomBytes(4).toString('hex'));
var args = process.argv.splice(2);
var tempdir = fs.mkdirSync(temppath);
var rimraf = require('rimraf');
done = function() {
  console.log('Cleaning up.');
  rimraf(temppath, function(err) {
    if (err) {
      console.error(err);
    }
    console.log('Done');
  });
};

var target = fs.createWriteStream(args[1]);


generate = function(book) {
  book.assets.initSync();
var chapter, _i, _len, _ref;

if (!book.meta.author) {
  book.meta.author = 'Placeholder';
}

if (!book.meta.title) {
  book.meta.title = 'Placeholder';
}

if (!book.meta.description) {
  book.meta.description = 'Placeholder';
}

if (!book.meta.lang) {
  book.meta.lang = 'Placeholder';
}

if (!book.meta.publisher) {
  book.meta.publisher = 'Placeholder';
}

if (!book.meta.subject1) {
  book.meta.subject1 = 'Placeholder';
}

var backmatter, landmark, toc, _i, _len;

if (book.meta.landmarks) {
  for (_i = 0, _len = book.meta.landmarks.length; _i < _len; _i++) {
    landmark = book.meta.landmarks[_i];
    if (landmark.type === 'backmatter') {
      backmatter = landmark;
    } else if (landmark.type === 'toc') {
      toc = landmark;
    }
  }
} 

if (!backmatter) {
  if (book.meta.landmarks) {
    book.meta.landmarks.push({
      type: 'backmatter',
      title: 'Backmatter',
      href: book.chapters[book.chapters.length - 1].filename
    });
  }
}

if (!toc) {
  if (book.meta.landmarks) {
    book.meta.landmarks.push({
      type: 'toc',
      title: 'Table of Contents',
      href: 'placeholder.html'
    });
  }
}

_ref = book.chapters;
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  chapter = _ref[_i];
  chapter.type = 'html';
}
  book.toEpub(target);
};

load = function(book) {
  return generate(book).then(function() {done()});
};


// loader = bookmaker.Book.fromEpub(args[0], temppath);
loader = bookmaker.Book.fromEpub(args[0], 'tempassets/');


loader.then(function(book) {
  return load(book);
});
